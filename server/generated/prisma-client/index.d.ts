// Code generated by Prisma (prisma@1.34.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  contact: (where?: ContactWhereInput) => Promise<boolean>;
  sMS: (where?: SMSWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  contact: (where: ContactWhereUniqueInput) => ContactNullablePromise;
  contacts: (args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Contact>;
  contactsConnection: (args?: {
    where?: ContactWhereInput;
    orderBy?: ContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ContactConnectionPromise;
  sMS: (where: SMSWhereUniqueInput) => SMSNullablePromise;
  sMses: (args?: {
    where?: SMSWhereInput;
    orderBy?: SMSOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SMS>;
  sMsesConnection: (args?: {
    where?: SMSWhereInput;
    orderBy?: SMSOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SMSConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createContact: (data: ContactCreateInput) => ContactPromise;
  updateContact: (args: {
    data: ContactUpdateInput;
    where: ContactWhereUniqueInput;
  }) => ContactPromise;
  updateManyContacts: (args: {
    data: ContactUpdateManyMutationInput;
    where?: ContactWhereInput;
  }) => BatchPayloadPromise;
  upsertContact: (args: {
    where: ContactWhereUniqueInput;
    create: ContactCreateInput;
    update: ContactUpdateInput;
  }) => ContactPromise;
  deleteContact: (where: ContactWhereUniqueInput) => ContactPromise;
  deleteManyContacts: (where?: ContactWhereInput) => BatchPayloadPromise;
  createSMS: (data: SMSCreateInput) => SMSPromise;
  updateSMS: (args: {
    data: SMSUpdateInput;
    where: SMSWhereUniqueInput;
  }) => SMSPromise;
  updateManySMses: (args: {
    data: SMSUpdateManyMutationInput;
    where?: SMSWhereInput;
  }) => BatchPayloadPromise;
  upsertSMS: (args: {
    where: SMSWhereUniqueInput;
    create: SMSCreateInput;
    update: SMSUpdateInput;
  }) => SMSPromise;
  deleteSMS: (where: SMSWhereUniqueInput) => SMSPromise;
  deleteManySMses: (where?: SMSWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  contact: (
    where?: ContactSubscriptionWhereInput
  ) => ContactSubscriptionPayloadSubscription;
  sMS: (
    where?: SMSSubscriptionWhereInput
  ) => SMSSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type SMSOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "message_ASC"
  | "message_DESC"
  | "status_ASC"
  | "status_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type ContactOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "phonenumber_ASC"
  | "phonenumber_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ContactUpdateInput {
  name?: Maybe<String>;
  phonenumber?: Maybe<String>;
  sentMessages?: Maybe<SMSUpdateManyWithoutSenderInput>;
  recievedMessages?: Maybe<SMSUpdateManyWithoutRecieverInput>;
}

export type ContactWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  phonenumber?: Maybe<String>;
}>;

export interface SMSUpdateWithoutSenderDataInput {
  reciever?: Maybe<ContactUpdateOneWithoutRecievedMessagesInput>;
  message?: Maybe<String>;
  status?: Maybe<String>;
}

export interface ContactWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  phonenumber?: Maybe<String>;
  phonenumber_not?: Maybe<String>;
  phonenumber_in?: Maybe<String[] | String>;
  phonenumber_not_in?: Maybe<String[] | String>;
  phonenumber_lt?: Maybe<String>;
  phonenumber_lte?: Maybe<String>;
  phonenumber_gt?: Maybe<String>;
  phonenumber_gte?: Maybe<String>;
  phonenumber_contains?: Maybe<String>;
  phonenumber_not_contains?: Maybe<String>;
  phonenumber_starts_with?: Maybe<String>;
  phonenumber_not_starts_with?: Maybe<String>;
  phonenumber_ends_with?: Maybe<String>;
  phonenumber_not_ends_with?: Maybe<String>;
  sentMessages_every?: Maybe<SMSWhereInput>;
  sentMessages_some?: Maybe<SMSWhereInput>;
  sentMessages_none?: Maybe<SMSWhereInput>;
  recievedMessages_every?: Maybe<SMSWhereInput>;
  recievedMessages_some?: Maybe<SMSWhereInput>;
  recievedMessages_none?: Maybe<SMSWhereInput>;
  AND?: Maybe<ContactWhereInput[] | ContactWhereInput>;
  OR?: Maybe<ContactWhereInput[] | ContactWhereInput>;
  NOT?: Maybe<ContactWhereInput[] | ContactWhereInput>;
}

export interface ContactUpdateOneWithoutRecievedMessagesInput {
  create?: Maybe<ContactCreateWithoutRecievedMessagesInput>;
  update?: Maybe<ContactUpdateWithoutRecievedMessagesDataInput>;
  upsert?: Maybe<ContactUpsertWithoutRecievedMessagesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ContactWhereUniqueInput>;
}

export interface SMSWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  sender?: Maybe<ContactWhereInput>;
  reciever?: Maybe<ContactWhereInput>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SMSWhereInput[] | SMSWhereInput>;
  OR?: Maybe<SMSWhereInput[] | SMSWhereInput>;
  NOT?: Maybe<SMSWhereInput[] | SMSWhereInput>;
}

export interface SMSCreateManyWithoutRecieverInput {
  create?: Maybe<
    SMSCreateWithoutRecieverInput[] | SMSCreateWithoutRecieverInput
  >;
  connect?: Maybe<SMSWhereUniqueInput[] | SMSWhereUniqueInput>;
}

export interface SMSUpdateManyWithoutRecieverInput {
  create?: Maybe<
    SMSCreateWithoutRecieverInput[] | SMSCreateWithoutRecieverInput
  >;
  delete?: Maybe<SMSWhereUniqueInput[] | SMSWhereUniqueInput>;
  connect?: Maybe<SMSWhereUniqueInput[] | SMSWhereUniqueInput>;
  set?: Maybe<SMSWhereUniqueInput[] | SMSWhereUniqueInput>;
  disconnect?: Maybe<SMSWhereUniqueInput[] | SMSWhereUniqueInput>;
  update?: Maybe<
    | SMSUpdateWithWhereUniqueWithoutRecieverInput[]
    | SMSUpdateWithWhereUniqueWithoutRecieverInput
  >;
  upsert?: Maybe<
    | SMSUpsertWithWhereUniqueWithoutRecieverInput[]
    | SMSUpsertWithWhereUniqueWithoutRecieverInput
  >;
  deleteMany?: Maybe<SMSScalarWhereInput[] | SMSScalarWhereInput>;
  updateMany?: Maybe<
    SMSUpdateManyWithWhereNestedInput[] | SMSUpdateManyWithWhereNestedInput
  >;
}

export interface SMSCreateWithoutRecieverInput {
  id?: Maybe<ID_Input>;
  sender?: Maybe<ContactCreateOneWithoutSentMessagesInput>;
  message: String;
  status: String;
}

export interface ContactUpdateWithoutRecievedMessagesDataInput {
  name?: Maybe<String>;
  phonenumber?: Maybe<String>;
  sentMessages?: Maybe<SMSUpdateManyWithoutSenderInput>;
}

export interface ContactCreateOneWithoutSentMessagesInput {
  create?: Maybe<ContactCreateWithoutSentMessagesInput>;
  connect?: Maybe<ContactWhereUniqueInput>;
}

export interface ContactSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ContactWhereInput>;
  AND?: Maybe<ContactSubscriptionWhereInput[] | ContactSubscriptionWhereInput>;
  OR?: Maybe<ContactSubscriptionWhereInput[] | ContactSubscriptionWhereInput>;
  NOT?: Maybe<ContactSubscriptionWhereInput[] | ContactSubscriptionWhereInput>;
}

export interface ContactCreateWithoutSentMessagesInput {
  id?: Maybe<ID_Input>;
  name: String;
  phonenumber: String;
  recievedMessages?: Maybe<SMSCreateManyWithoutRecieverInput>;
}

export interface SMSUpdateInput {
  sender?: Maybe<ContactUpdateOneWithoutSentMessagesInput>;
  reciever?: Maybe<ContactUpdateOneWithoutRecievedMessagesInput>;
  message?: Maybe<String>;
  status?: Maybe<String>;
}

export interface ContactUpdateWithoutSentMessagesDataInput {
  name?: Maybe<String>;
  phonenumber?: Maybe<String>;
  recievedMessages?: Maybe<SMSUpdateManyWithoutRecieverInput>;
}

export type SMSWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SMSUpdateManyWithoutSenderInput {
  create?: Maybe<SMSCreateWithoutSenderInput[] | SMSCreateWithoutSenderInput>;
  delete?: Maybe<SMSWhereUniqueInput[] | SMSWhereUniqueInput>;
  connect?: Maybe<SMSWhereUniqueInput[] | SMSWhereUniqueInput>;
  set?: Maybe<SMSWhereUniqueInput[] | SMSWhereUniqueInput>;
  disconnect?: Maybe<SMSWhereUniqueInput[] | SMSWhereUniqueInput>;
  update?: Maybe<
    | SMSUpdateWithWhereUniqueWithoutSenderInput[]
    | SMSUpdateWithWhereUniqueWithoutSenderInput
  >;
  upsert?: Maybe<
    | SMSUpsertWithWhereUniqueWithoutSenderInput[]
    | SMSUpsertWithWhereUniqueWithoutSenderInput
  >;
  deleteMany?: Maybe<SMSScalarWhereInput[] | SMSScalarWhereInput>;
  updateMany?: Maybe<
    SMSUpdateManyWithWhereNestedInput[] | SMSUpdateManyWithWhereNestedInput
  >;
}

export interface SMSUpsertWithWhereUniqueWithoutRecieverInput {
  where: SMSWhereUniqueInput;
  update: SMSUpdateWithoutRecieverDataInput;
  create: SMSCreateWithoutRecieverInput;
}

export interface SMSUpdateWithWhereUniqueWithoutSenderInput {
  where: SMSWhereUniqueInput;
  data: SMSUpdateWithoutSenderDataInput;
}

export interface SMSCreateManyWithoutSenderInput {
  create?: Maybe<SMSCreateWithoutSenderInput[] | SMSCreateWithoutSenderInput>;
  connect?: Maybe<SMSWhereUniqueInput[] | SMSWhereUniqueInput>;
}

export interface ContactUpdateOneWithoutSentMessagesInput {
  create?: Maybe<ContactCreateWithoutSentMessagesInput>;
  update?: Maybe<ContactUpdateWithoutSentMessagesDataInput>;
  upsert?: Maybe<ContactUpsertWithoutSentMessagesInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ContactWhereUniqueInput>;
}

export interface ContactCreateOneWithoutRecievedMessagesInput {
  create?: Maybe<ContactCreateWithoutRecievedMessagesInput>;
  connect?: Maybe<ContactWhereUniqueInput>;
}

export interface SMSUpdateWithoutRecieverDataInput {
  sender?: Maybe<ContactUpdateOneWithoutSentMessagesInput>;
  message?: Maybe<String>;
  status?: Maybe<String>;
}

export interface SMSSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SMSWhereInput>;
  AND?: Maybe<SMSSubscriptionWhereInput[] | SMSSubscriptionWhereInput>;
  OR?: Maybe<SMSSubscriptionWhereInput[] | SMSSubscriptionWhereInput>;
  NOT?: Maybe<SMSSubscriptionWhereInput[] | SMSSubscriptionWhereInput>;
}

export interface SMSUpdateWithWhereUniqueWithoutRecieverInput {
  where: SMSWhereUniqueInput;
  data: SMSUpdateWithoutRecieverDataInput;
}

export interface SMSCreateInput {
  id?: Maybe<ID_Input>;
  sender?: Maybe<ContactCreateOneWithoutSentMessagesInput>;
  reciever?: Maybe<ContactCreateOneWithoutRecievedMessagesInput>;
  message: String;
  status: String;
}

export interface ContactUpsertWithoutRecievedMessagesInput {
  update: ContactUpdateWithoutRecievedMessagesDataInput;
  create: ContactCreateWithoutRecievedMessagesInput;
}

export interface ContactUpsertWithoutSentMessagesInput {
  update: ContactUpdateWithoutSentMessagesDataInput;
  create: ContactCreateWithoutSentMessagesInput;
}

export interface SMSUpdateManyDataInput {
  message?: Maybe<String>;
  status?: Maybe<String>;
}

export interface SMSUpdateManyWithWhereNestedInput {
  where: SMSScalarWhereInput;
  data: SMSUpdateManyDataInput;
}

export interface SMSScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  message?: Maybe<String>;
  message_not?: Maybe<String>;
  message_in?: Maybe<String[] | String>;
  message_not_in?: Maybe<String[] | String>;
  message_lt?: Maybe<String>;
  message_lte?: Maybe<String>;
  message_gt?: Maybe<String>;
  message_gte?: Maybe<String>;
  message_contains?: Maybe<String>;
  message_not_contains?: Maybe<String>;
  message_starts_with?: Maybe<String>;
  message_not_starts_with?: Maybe<String>;
  message_ends_with?: Maybe<String>;
  message_not_ends_with?: Maybe<String>;
  status?: Maybe<String>;
  status_not?: Maybe<String>;
  status_in?: Maybe<String[] | String>;
  status_not_in?: Maybe<String[] | String>;
  status_lt?: Maybe<String>;
  status_lte?: Maybe<String>;
  status_gt?: Maybe<String>;
  status_gte?: Maybe<String>;
  status_contains?: Maybe<String>;
  status_not_contains?: Maybe<String>;
  status_starts_with?: Maybe<String>;
  status_not_starts_with?: Maybe<String>;
  status_ends_with?: Maybe<String>;
  status_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<SMSScalarWhereInput[] | SMSScalarWhereInput>;
  OR?: Maybe<SMSScalarWhereInput[] | SMSScalarWhereInput>;
  NOT?: Maybe<SMSScalarWhereInput[] | SMSScalarWhereInput>;
}

export interface SMSUpsertWithWhereUniqueWithoutSenderInput {
  where: SMSWhereUniqueInput;
  update: SMSUpdateWithoutSenderDataInput;
  create: SMSCreateWithoutSenderInput;
}

export interface ContactCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  phonenumber: String;
  sentMessages?: Maybe<SMSCreateManyWithoutSenderInput>;
  recievedMessages?: Maybe<SMSCreateManyWithoutRecieverInput>;
}

export interface ContactUpdateManyMutationInput {
  name?: Maybe<String>;
  phonenumber?: Maybe<String>;
}

export interface SMSUpdateManyMutationInput {
  message?: Maybe<String>;
  status?: Maybe<String>;
}

export interface ContactCreateWithoutRecievedMessagesInput {
  id?: Maybe<ID_Input>;
  name: String;
  phonenumber: String;
  sentMessages?: Maybe<SMSCreateManyWithoutSenderInput>;
}

export interface SMSCreateWithoutSenderInput {
  id?: Maybe<ID_Input>;
  reciever?: Maybe<ContactCreateOneWithoutRecievedMessagesInput>;
  message: String;
  status: String;
}

export interface NodeNode {
  id: ID_Output;
}

export interface SMSPreviousValues {
  id: ID_Output;
  message: String;
  status: String;
  createdAt: DateTimeOutput;
}

export interface SMSPreviousValuesPromise
  extends Promise<SMSPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  message: () => Promise<String>;
  status: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SMSPreviousValuesSubscription
  extends Promise<AsyncIterator<SMSPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  message: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateContact {
  count: Int;
}

export interface AggregateContactPromise
  extends Promise<AggregateContact>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateContactSubscription
  extends Promise<AsyncIterator<AggregateContact>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SMS {
  id: ID_Output;
  message: String;
  status: String;
  createdAt: DateTimeOutput;
}

export interface SMSPromise extends Promise<SMS>, Fragmentable {
  id: () => Promise<ID_Output>;
  sender: <T = ContactPromise>() => T;
  reciever: <T = ContactPromise>() => T;
  message: () => Promise<String>;
  status: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface SMSSubscription
  extends Promise<AsyncIterator<SMS>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  sender: <T = ContactSubscription>() => T;
  reciever: <T = ContactSubscription>() => T;
  message: () => Promise<AsyncIterator<String>>;
  status: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface SMSNullablePromise extends Promise<SMS | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  sender: <T = ContactPromise>() => T;
  reciever: <T = ContactPromise>() => T;
  message: () => Promise<String>;
  status: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ContactEdge {
  node: Contact;
  cursor: String;
}

export interface ContactEdgePromise extends Promise<ContactEdge>, Fragmentable {
  node: <T = ContactPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ContactEdgeSubscription
  extends Promise<AsyncIterator<ContactEdge>>,
    Fragmentable {
  node: <T = ContactSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Contact {
  id: ID_Output;
  name: String;
  phonenumber: String;
}

export interface ContactPromise extends Promise<Contact>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  phonenumber: () => Promise<String>;
  sentMessages: <T = FragmentableArray<SMS>>(args?: {
    where?: SMSWhereInput;
    orderBy?: SMSOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recievedMessages: <T = FragmentableArray<SMS>>(args?: {
    where?: SMSWhereInput;
    orderBy?: SMSOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ContactSubscription
  extends Promise<AsyncIterator<Contact>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  phonenumber: () => Promise<AsyncIterator<String>>;
  sentMessages: <T = Promise<AsyncIterator<SMSSubscription>>>(args?: {
    where?: SMSWhereInput;
    orderBy?: SMSOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recievedMessages: <T = Promise<AsyncIterator<SMSSubscription>>>(args?: {
    where?: SMSWhereInput;
    orderBy?: SMSOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ContactNullablePromise
  extends Promise<Contact | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  phonenumber: () => Promise<String>;
  sentMessages: <T = FragmentableArray<SMS>>(args?: {
    where?: SMSWhereInput;
    orderBy?: SMSOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  recievedMessages: <T = FragmentableArray<SMS>>(args?: {
    where?: SMSWhereInput;
    orderBy?: SMSOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ContactSubscriptionPayload {
  mutation: MutationType;
  node: Contact;
  updatedFields: String[];
  previousValues: ContactPreviousValues;
}

export interface ContactSubscriptionPayloadPromise
  extends Promise<ContactSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ContactPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ContactPreviousValuesPromise>() => T;
}

export interface ContactSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ContactSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ContactSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ContactPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface SMSEdge {
  node: SMS;
  cursor: String;
}

export interface SMSEdgePromise extends Promise<SMSEdge>, Fragmentable {
  node: <T = SMSPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SMSEdgeSubscription
  extends Promise<AsyncIterator<SMSEdge>>,
    Fragmentable {
  node: <T = SMSSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ContactPreviousValues {
  id: ID_Output;
  name: String;
  phonenumber: String;
}

export interface ContactPreviousValuesPromise
  extends Promise<ContactPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  phonenumber: () => Promise<String>;
}

export interface ContactPreviousValuesSubscription
  extends Promise<AsyncIterator<ContactPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  phonenumber: () => Promise<AsyncIterator<String>>;
}

export interface ContactConnection {
  pageInfo: PageInfo;
  edges: ContactEdge[];
}

export interface ContactConnectionPromise
  extends Promise<ContactConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ContactEdge>>() => T;
  aggregate: <T = AggregateContactPromise>() => T;
}

export interface ContactConnectionSubscription
  extends Promise<AsyncIterator<ContactConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ContactEdgeSubscription>>>() => T;
  aggregate: <T = AggregateContactSubscription>() => T;
}

export interface SMSSubscriptionPayload {
  mutation: MutationType;
  node: SMS;
  updatedFields: String[];
  previousValues: SMSPreviousValues;
}

export interface SMSSubscriptionPayloadPromise
  extends Promise<SMSSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SMSPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SMSPreviousValuesPromise>() => T;
}

export interface SMSSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SMSSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SMSSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SMSPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface SMSConnection {
  pageInfo: PageInfo;
  edges: SMSEdge[];
}

export interface SMSConnectionPromise
  extends Promise<SMSConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SMSEdge>>() => T;
  aggregate: <T = AggregateSMSPromise>() => T;
}

export interface SMSConnectionSubscription
  extends Promise<AsyncIterator<SMSConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SMSEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSMSSubscription>() => T;
}

export interface AggregateSMS {
  count: Int;
}

export interface AggregateSMSPromise
  extends Promise<AggregateSMS>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSMSSubscription
  extends Promise<AsyncIterator<AggregateSMS>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Contact",
    embedded: false
  },
  {
    name: "SMS",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
