module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateContact {
  count: Int!
}

type AggregateSMS {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Contact {
  id: ID!
  name: String!
  phonenumber: String!
  sentMessages(where: SMSWhereInput, orderBy: SMSOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SMS!]
  recievedMessages(where: SMSWhereInput, orderBy: SMSOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SMS!]
}

type ContactConnection {
  pageInfo: PageInfo!
  edges: [ContactEdge]!
  aggregate: AggregateContact!
}

input ContactCreateInput {
  id: ID
  name: String!
  phonenumber: String!
  sentMessages: SMSCreateManyWithoutSenderInput
  recievedMessages: SMSCreateManyWithoutRecieverInput
}

input ContactCreateOneWithoutRecievedMessagesInput {
  create: ContactCreateWithoutRecievedMessagesInput
  connect: ContactWhereUniqueInput
}

input ContactCreateOneWithoutSentMessagesInput {
  create: ContactCreateWithoutSentMessagesInput
  connect: ContactWhereUniqueInput
}

input ContactCreateWithoutRecievedMessagesInput {
  id: ID
  name: String!
  phonenumber: String!
  sentMessages: SMSCreateManyWithoutSenderInput
}

input ContactCreateWithoutSentMessagesInput {
  id: ID
  name: String!
  phonenumber: String!
  recievedMessages: SMSCreateManyWithoutRecieverInput
}

type ContactEdge {
  node: Contact!
  cursor: String!
}

enum ContactOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  phonenumber_ASC
  phonenumber_DESC
}

type ContactPreviousValues {
  id: ID!
  name: String!
  phonenumber: String!
}

type ContactSubscriptionPayload {
  mutation: MutationType!
  node: Contact
  updatedFields: [String!]
  previousValues: ContactPreviousValues
}

input ContactSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ContactWhereInput
  AND: [ContactSubscriptionWhereInput!]
  OR: [ContactSubscriptionWhereInput!]
  NOT: [ContactSubscriptionWhereInput!]
}

input ContactUpdateInput {
  name: String
  phonenumber: String
  sentMessages: SMSUpdateManyWithoutSenderInput
  recievedMessages: SMSUpdateManyWithoutRecieverInput
}

input ContactUpdateManyMutationInput {
  name: String
  phonenumber: String
}

input ContactUpdateOneWithoutRecievedMessagesInput {
  create: ContactCreateWithoutRecievedMessagesInput
  update: ContactUpdateWithoutRecievedMessagesDataInput
  upsert: ContactUpsertWithoutRecievedMessagesInput
  delete: Boolean
  disconnect: Boolean
  connect: ContactWhereUniqueInput
}

input ContactUpdateOneWithoutSentMessagesInput {
  create: ContactCreateWithoutSentMessagesInput
  update: ContactUpdateWithoutSentMessagesDataInput
  upsert: ContactUpsertWithoutSentMessagesInput
  delete: Boolean
  disconnect: Boolean
  connect: ContactWhereUniqueInput
}

input ContactUpdateWithoutRecievedMessagesDataInput {
  name: String
  phonenumber: String
  sentMessages: SMSUpdateManyWithoutSenderInput
}

input ContactUpdateWithoutSentMessagesDataInput {
  name: String
  phonenumber: String
  recievedMessages: SMSUpdateManyWithoutRecieverInput
}

input ContactUpsertWithoutRecievedMessagesInput {
  update: ContactUpdateWithoutRecievedMessagesDataInput!
  create: ContactCreateWithoutRecievedMessagesInput!
}

input ContactUpsertWithoutSentMessagesInput {
  update: ContactUpdateWithoutSentMessagesDataInput!
  create: ContactCreateWithoutSentMessagesInput!
}

input ContactWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  phonenumber: String
  phonenumber_not: String
  phonenumber_in: [String!]
  phonenumber_not_in: [String!]
  phonenumber_lt: String
  phonenumber_lte: String
  phonenumber_gt: String
  phonenumber_gte: String
  phonenumber_contains: String
  phonenumber_not_contains: String
  phonenumber_starts_with: String
  phonenumber_not_starts_with: String
  phonenumber_ends_with: String
  phonenumber_not_ends_with: String
  sentMessages_every: SMSWhereInput
  sentMessages_some: SMSWhereInput
  sentMessages_none: SMSWhereInput
  recievedMessages_every: SMSWhereInput
  recievedMessages_some: SMSWhereInput
  recievedMessages_none: SMSWhereInput
  AND: [ContactWhereInput!]
  OR: [ContactWhereInput!]
  NOT: [ContactWhereInput!]
}

input ContactWhereUniqueInput {
  id: ID
  phonenumber: String
}

scalar DateTime

scalar Long

type Mutation {
  createContact(data: ContactCreateInput!): Contact!
  updateContact(data: ContactUpdateInput!, where: ContactWhereUniqueInput!): Contact
  updateManyContacts(data: ContactUpdateManyMutationInput!, where: ContactWhereInput): BatchPayload!
  upsertContact(where: ContactWhereUniqueInput!, create: ContactCreateInput!, update: ContactUpdateInput!): Contact!
  deleteContact(where: ContactWhereUniqueInput!): Contact
  deleteManyContacts(where: ContactWhereInput): BatchPayload!
  createSMS(data: SMSCreateInput!): SMS!
  updateSMS(data: SMSUpdateInput!, where: SMSWhereUniqueInput!): SMS
  updateManySMses(data: SMSUpdateManyMutationInput!, where: SMSWhereInput): BatchPayload!
  upsertSMS(where: SMSWhereUniqueInput!, create: SMSCreateInput!, update: SMSUpdateInput!): SMS!
  deleteSMS(where: SMSWhereUniqueInput!): SMS
  deleteManySMses(where: SMSWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  contact(where: ContactWhereUniqueInput!): Contact
  contacts(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contact]!
  contactsConnection(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContactConnection!
  sMS(where: SMSWhereUniqueInput!): SMS
  sMses(where: SMSWhereInput, orderBy: SMSOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SMS]!
  sMsesConnection(where: SMSWhereInput, orderBy: SMSOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SMSConnection!
  node(id: ID!): Node
}

type SMS {
  id: ID!
  sender: Contact
  reciever: Contact
  message: String!
  status: String!
  createdAt: DateTime!
}

type SMSConnection {
  pageInfo: PageInfo!
  edges: [SMSEdge]!
  aggregate: AggregateSMS!
}

input SMSCreateInput {
  id: ID
  sender: ContactCreateOneWithoutSentMessagesInput
  reciever: ContactCreateOneWithoutRecievedMessagesInput
  message: String!
  status: String!
}

input SMSCreateManyWithoutRecieverInput {
  create: [SMSCreateWithoutRecieverInput!]
  connect: [SMSWhereUniqueInput!]
}

input SMSCreateManyWithoutSenderInput {
  create: [SMSCreateWithoutSenderInput!]
  connect: [SMSWhereUniqueInput!]
}

input SMSCreateWithoutRecieverInput {
  id: ID
  sender: ContactCreateOneWithoutSentMessagesInput
  message: String!
  status: String!
}

input SMSCreateWithoutSenderInput {
  id: ID
  reciever: ContactCreateOneWithoutRecievedMessagesInput
  message: String!
  status: String!
}

type SMSEdge {
  node: SMS!
  cursor: String!
}

enum SMSOrderByInput {
  id_ASC
  id_DESC
  message_ASC
  message_DESC
  status_ASC
  status_DESC
  createdAt_ASC
  createdAt_DESC
}

type SMSPreviousValues {
  id: ID!
  message: String!
  status: String!
  createdAt: DateTime!
}

input SMSScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [SMSScalarWhereInput!]
  OR: [SMSScalarWhereInput!]
  NOT: [SMSScalarWhereInput!]
}

type SMSSubscriptionPayload {
  mutation: MutationType!
  node: SMS
  updatedFields: [String!]
  previousValues: SMSPreviousValues
}

input SMSSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SMSWhereInput
  AND: [SMSSubscriptionWhereInput!]
  OR: [SMSSubscriptionWhereInput!]
  NOT: [SMSSubscriptionWhereInput!]
}

input SMSUpdateInput {
  sender: ContactUpdateOneWithoutSentMessagesInput
  reciever: ContactUpdateOneWithoutRecievedMessagesInput
  message: String
  status: String
}

input SMSUpdateManyDataInput {
  message: String
  status: String
}

input SMSUpdateManyMutationInput {
  message: String
  status: String
}

input SMSUpdateManyWithoutRecieverInput {
  create: [SMSCreateWithoutRecieverInput!]
  delete: [SMSWhereUniqueInput!]
  connect: [SMSWhereUniqueInput!]
  set: [SMSWhereUniqueInput!]
  disconnect: [SMSWhereUniqueInput!]
  update: [SMSUpdateWithWhereUniqueWithoutRecieverInput!]
  upsert: [SMSUpsertWithWhereUniqueWithoutRecieverInput!]
  deleteMany: [SMSScalarWhereInput!]
  updateMany: [SMSUpdateManyWithWhereNestedInput!]
}

input SMSUpdateManyWithoutSenderInput {
  create: [SMSCreateWithoutSenderInput!]
  delete: [SMSWhereUniqueInput!]
  connect: [SMSWhereUniqueInput!]
  set: [SMSWhereUniqueInput!]
  disconnect: [SMSWhereUniqueInput!]
  update: [SMSUpdateWithWhereUniqueWithoutSenderInput!]
  upsert: [SMSUpsertWithWhereUniqueWithoutSenderInput!]
  deleteMany: [SMSScalarWhereInput!]
  updateMany: [SMSUpdateManyWithWhereNestedInput!]
}

input SMSUpdateManyWithWhereNestedInput {
  where: SMSScalarWhereInput!
  data: SMSUpdateManyDataInput!
}

input SMSUpdateWithoutRecieverDataInput {
  sender: ContactUpdateOneWithoutSentMessagesInput
  message: String
  status: String
}

input SMSUpdateWithoutSenderDataInput {
  reciever: ContactUpdateOneWithoutRecievedMessagesInput
  message: String
  status: String
}

input SMSUpdateWithWhereUniqueWithoutRecieverInput {
  where: SMSWhereUniqueInput!
  data: SMSUpdateWithoutRecieverDataInput!
}

input SMSUpdateWithWhereUniqueWithoutSenderInput {
  where: SMSWhereUniqueInput!
  data: SMSUpdateWithoutSenderDataInput!
}

input SMSUpsertWithWhereUniqueWithoutRecieverInput {
  where: SMSWhereUniqueInput!
  update: SMSUpdateWithoutRecieverDataInput!
  create: SMSCreateWithoutRecieverInput!
}

input SMSUpsertWithWhereUniqueWithoutSenderInput {
  where: SMSWhereUniqueInput!
  update: SMSUpdateWithoutSenderDataInput!
  create: SMSCreateWithoutSenderInput!
}

input SMSWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sender: ContactWhereInput
  reciever: ContactWhereInput
  message: String
  message_not: String
  message_in: [String!]
  message_not_in: [String!]
  message_lt: String
  message_lte: String
  message_gt: String
  message_gte: String
  message_contains: String
  message_not_contains: String
  message_starts_with: String
  message_not_starts_with: String
  message_ends_with: String
  message_not_ends_with: String
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [SMSWhereInput!]
  OR: [SMSWhereInput!]
  NOT: [SMSWhereInput!]
}

input SMSWhereUniqueInput {
  id: ID
}

type Subscription {
  contact(where: ContactSubscriptionWhereInput): ContactSubscriptionPayload
  sMS(where: SMSSubscriptionWhereInput): SMSSubscriptionPayload
}
`
      }
    